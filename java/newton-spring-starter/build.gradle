buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE'
  }
}

apply plugin: 'maven'

repositories {
  maven {
    url 'https://artifactory.cloud.daviddawson.me/artifactory/muon'
  }
  jcenter()
}

def springVersion = '1.5.2.RELEASE'

dependencies {
  compile project(path: ':newton-core')

  compile 'commons-beanutils:commons-beanutils:1.9.3'
  compile "org.springframework.boot:spring-boot:$springVersion"
  compile "org.springframework.boot:spring-boot-autoconfigure:$springVersion"
}

task sourceJar(type: Jar) {
  from sourceSets.main.allJava
}

task packageJavadoc(type: Jar) {
  from javadoc
  classifier = 'javadoc'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact sourceJar {
        classifier 'sources'
      }
      artifact packageJavadoc
      pom.withXml {
        asNode().appendNode('name', 'Newton Spring Starter')
        asNode().appendNode('description', 'Newton is a toolkit for building highly portable, polyglot, reactive ' +
          'microservices. Newton Spring Starter implements DDD patterns on top of the Muon Event Log API.')
        asNode().appendNode('url', 'http://muoncore.io')
        def license = asNode().appendNode('licenses').appendNode('license')
        license.appendNode('name', 'The GNU Lesser General Public License, Version 3.0')
        license.appendNode('url', 'http://www.gnu.org/licenses/lgpl-3.0.txt')
        license.appendNode('distribution', 'repo')

        asNode().appendNode('scm').appendNode('url', 'https://github.com/muoncore/newton')

        def developers = asNode().appendNode('developers')
        def dev = developers.appendNode('developer')
        dev.appendNode('name', 'Muon Developers')
        dev.appendNode('email', 'info@muoncore.io')
        dev.appendNode('organization', 'Muon Project')
        dev.appendNode('organizationUrl', 'http://muoncore.io')

      }
    }
  }
}

javadoc {
  source = sourceSets.main.allJava
  classpath = configurations.compileClasspath

  options {
    setMemberLevel JavadocMemberLevel.PUBLIC
    setAuthor true

    links "https://docs.oracle.com/javase/8/docs/api/"
  }
}
